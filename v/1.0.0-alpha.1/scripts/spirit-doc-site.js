// DO NOT EDIT: This file is automatically generated by the project's build task
/* eslint-disable */
// https://tc39.github.io/ecma262/#sec-array.prototype.find
if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function(predicate) {
     // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0;

      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }

      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
      var thisArg = arguments[1];

      // 5. Let k be 0.
      var k = 0;

      // 6. Repeat, while k < len
      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return kValue.
        var kValue = o[k];
        if (predicate.call(thisArg, kValue, k, o)) {
          return kValue;
        }
        // e. Increase k by 1.
        k++;
      }

      // 7. Return undefined.
      return undefined;
    },
    configurable: true,
    writable: true
  });
}
/* eslint-enable */

class SpiritDocIconSwatch {
  static init() {
    // Get all the icon swatches
    const iconSwatches = Array.from(document.querySelectorAll('.spirit-doc-icon-swatch'));
    iconSwatches.forEach((s) => {
      SpiritDocIconSwatch.initializeEachSwatch(s);
    });
  }

  static initializeEachSwatch(swatch) {
    swatch.addEventListener('click', () => {
      swatch.classList.remove('spirit-doc-icon-swatch--name-copied');
      SpiritDocIconSwatch.copyIconName(swatch);
    });
  }

  static copyIconName(swatch) {
    const source = swatch.querySelector('.esds-doc-icon-swatch__label');

    if (swatch.querySelector('.spirit-doc-icon-swatch__name-copied-message') === null) {
      const feedbackMessage = document.createElement('span');
      feedbackMessage.textContent = "Icon Name Copied";
      feedbackMessage.classList.add('spirit-doc-icon-swatch__name-copied-message');
      swatch.appendChild(feedbackMessage);
    }

    let textarea = document.createElement('textarea');
    textarea.style.height = '0';
    textarea.style.width = '0';
    textarea.style.position = 'absolute';
    textarea.style.left = '-99999px';
    swatch.appendChild(textarea);

    textarea.textContent = source.textContent.trim();
    textarea.select();

    try {
      var successful = document.execCommand('copy');
      if (successful) {
        swatch.classList.add('spirit-doc-icon-swatch--name-copied');
      } else {
        // Don't show anything
      }
      // var msg = successful ? 'successful' : 'unsuccessful';
    } catch (err) {
      // Don't show anything
    } finally {
      // remove the temp textarea
      swatch.removeChild(textarea);
    }
  }
}

SpiritDocIconSwatch.init();

class SpiritDocSiteNav {
  static init() {
    // Highlight active page based on current window.location
    const siteNav = document.querySelector('.spirit-doc-site-nav');
    const currentUrl = window.location.pathname;
    if (currentUrl !== '/') {
      const activeLink = siteNav.querySelector('a[href*="' + currentUrl + '"]');
      activeLink.classList.add('spirit-doc-site-nav--active-link');
    }
  }
}

SpiritDocSiteNav.init();

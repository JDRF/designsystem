@mixin spirit-font-reset {
  color: $spirit-color-black;
  font-style: normal;
  font-weight: normal;
  letter-spacing: initial;
  line-height: $spirit-font-line-height-body;
  text-decoration: none;
  text-indent: 0;
  text-shadow: none;
  text-transform: none;

  .spirit-col--dark & {
    -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes
    color: $spirit-color-white;
  }
}

@mixin spirit-font-size-responsive(
  $font-type: ('heading', 'level-1'),
  $breakpoint: 'l'
) {
  $font-size-base: ('font', 'size');

  @if type_of($breakpoint) != 'string' {
    @error 'Received a #{type_of($breakpoint)} of #{$breakpoint} for $breakpoint. Please supply a single string.';
  }

  $breakpoint-width: spirit-token('breakpoint', $breakpoint);

  @if type_of($breakpoint-width) == 'null' {
    @error 'Invalid value received for $breakpoint. Please check that the parameter matches a valid token.';
  }

  @if type_of($font-type) != 'list' and type_of('font-type') != 'string' {
    @error 'Received #{$font-type} for $font-type. Please supply a comma separated list of items which matches those in the token file below font > size.'
  }

  // Combine the further parts of the tree
  $joined: join($font-size-base, $font-type, 'comma');
  $font-size: spirit-token($joined...);

  @if type_of($font-size) == null {
    @error 'Cannot find token at #{$joined}. Please check that you\'re addresing a valid token.'
  }

  @if type_of($font-size) != 'number' and type_of($font-size) != 'map' {
    @error 'Sorry, an unexpected result was returned from #{joined}: #{$font-size}. Expecting a map with "normal" and "breakpoint-l" keys.'
  }

  // The token could just be a non-responsive value
  @if type_of($font-size) == number {
    font-size: $font-size;
  }

  // The value could be a map of font sizes
  @if type_of($font-size) == map {
    $font-size-normal: map_get($font-size, 'normal');
    $font-size-breakpoint: map_get($font-size, 'breakpoint-#{$breakpoint}');
    font-size: $font-size-normal;
    @media screen and (min-width: $breakpoint-width) {
      font-size: $font-size-breakpoint;
    }
  }

}

@mixin spirit-font-line-height-responsive(
  $font-type: ('heading', 'level-1'),
  $breakpoint: 'l'
) {
  $line-height-base: ('font', 'line-height');

  @if type_of($breakpoint) != 'string' {
    @error 'Received a #{type_of($breakpoint)} of #{$breakpoint} for $breakpoint. Please supply a single string.';
  }

  $breakpoint-width: spirit-token('breakpoint', $breakpoint);

  @if type_of($breakpoint-width) == 'null' {
    @error 'Invalid value received for $breakpoint. Please check that the parameter matches a valid token.';
  }

  @if type_of($font-type) != 'list' and type_of('font-type') != 'string' {
    @error 'Received #{$font-type} for $font-type. Please supply a comma separated list of items which matches those in the token file below font > size.'
  }

  // Combine the further parts of the tree
  $joined: join($line-height-base, $font-type, 'comma');
  $line-height: spirit-token($joined...);

  @if type_of($line-height) == null {
    @error 'Cannot find token at #{$joined}. Please check that you\'re addresing a valid token.'
  }

  @if type_of($line-height) != 'number' and type_of($line-height) != 'map' {
    @error 'Sorry, an unexpected result was returned from #{joined}: #{$line-height}. Expecting a map with "normal" and "breakpoint-l" keys.'
  }

  // The token could just be a non-responsive value
  @if type_of($line-height) == number {
    line-height: $line-height;
  }

  // The value could be a map of font sizes
  @if type_of($line-height) == map {
    $line-height-normal: map_get($line-height, 'normal');
    $line-height-breakpoint: map_get($line-height, 'breakpoint-#{$breakpoint}');
    line-height: $line-height-normal;
    @media screen and (min-width: $breakpoint-width) {
      line-height: $line-height-breakpoint;
    }
  }

}


h1,
h2,
h3,
h4,
h5,
h6 {
  @include spirit-font-reset;
  color: $spirit-color-black;
  font-weight: 700;
}

.spirit-display-1 {
  @include spirit-font-reset;
  @include spirit-font-size-responsive($font-type: ('display', 'level-1'));
  @include spirit-font-line-height-responsive($font-type: ('display', 'level-1'));
  color: $spirit-color-black;
  font-weight: 700;
}

.spirit-display-2 {
  @include spirit-font-reset;
  @include spirit-font-size-responsive($font-type: ('display', 'level-2'));
  @include spirit-font-line-height-responsive($font-type: ('display', 'level-2'));
  color: $spirit-color-black;
  font-weight: 700;
}

.spirit-h1 {
  @include spirit-font-size-responsive($font-type: ('heading', 'level-1'));
  @include spirit-font-line-height-responsive($font-type: ('heading', 'level-1'));
}

.spirit-h2 {
  @include spirit-font-size-responsive($font-type: ('heading', 'level-2'));
  @include spirit-font-line-height-responsive($font-type: ('heading', 'level-2'));
}

.spirit-h3 {
  @include spirit-font-size-responsive($font-type: ('heading', 'level-3'));
  @include spirit-font-line-height-responsive($font-type: ('heading', 'level-3'));

}

.spirit-h4 {
  @include spirit-font-size-responsive($font-type: ('heading', 'level-4'));
  @include spirit-font-line-height-responsive($font-type: ('heading', 'level-4'));

}

.spirit-h5 {
  @include spirit-font-size-responsive($font-type: ('heading', 'level-5'));
  @include spirit-font-line-height-responsive($font-type: ('heading', 'level-5'));

}

.spirit-h6 {
  @include spirit-font-size-responsive($font-type: ('heading', 'level-6'));
  @include spirit-font-line-height-responsive($font-type: ('heading', 'level-6'));
}

.spirit-subhead {
  @include spirit-font-reset;
  @include spirit-font-size-responsive($font-type: ('subhead'));
}

.spirit-body-text-l {
  @include spirit-font-reset;
  font-size: $spirit-font-size-l;
}

.spirit-body-text-m {
  @include spirit-font-reset;
  font-size: $spirit-font-size-m;
}

.spirit-body-text-s {
  @include spirit-font-reset;
  font-size: $spirit-font-size-s;
}
